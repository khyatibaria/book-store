{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n/**\r\n * All the routes related to Cart are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\n\n/**\r\n * This handler handles getting items to user's cart.\r\n * send GET Request at /api/user/cart\r\n * */\n\nexport const getCartItemsHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  if (!userId) {\n    return new Response(404, {}, {\n      errors: [\"The email you entered is not Registered. Not Found error\"]\n    });\n  }\n\n  const userCart = schema.users.findBy({\n    _id: userId\n  }).cart;\n  return new Response(200, {}, {\n    cart: userCart\n  });\n};\n/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart\r\n * body contains {product}\r\n * */\n\nexport const addItemToCartHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n    const {\n      product\n    } = JSON.parse(request.requestBody);\n    userCart.push({ ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      qty: 1\n    });\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(201, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles removing items to user's cart.\r\n * send DELETE Request at /api/user/cart/:productId\r\n * */\n\nexport const removeItemFromCartHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    let userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n    const productId = request.params.productId;\n    userCart = userCart.filter(item => item._id !== productId);\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(200, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart/:productId\r\n * body contains {action} (whose 'type' can be increment or decrement)\r\n * */\n\nexport const updateCartItemHandler = function (schema, request) {\n  const productId = request.params.productId;\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n    const {\n      action\n    } = JSON.parse(request.requestBody);\n\n    if (action.type === \"increment\") {\n      userCart.forEach(product => {\n        if (product._id === productId) {\n          product.qty += 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    } else if (action.type === \"decrement\") {\n      userCart.forEach(product => {\n        if (product._id === productId) {\n          product.qty -= 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    }\n\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(200, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"names":["Response","formatDate","requiresAuth","getCartItemsHandler","schema","request","userId","call","errors","userCart","users","findBy","_id","cart","addItemToCartHandler","product","JSON","parse","requestBody","push","createdAt","updatedAt","qty","db","update","error","removeItemFromCartHandler","productId","params","filter","item","updateCartItemHandler","action","type","forEach"],"sources":["D:/Neog Projects/book-store/book-store/src/backend/controllers/CartController.js"],"sourcesContent":["import { Response } from \"miragejs\";\r\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\r\n\r\n/**\r\n * All the routes related to Cart are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\r\n\r\n/**\r\n * This handler handles getting items to user's cart.\r\n * send GET Request at /api/user/cart\r\n * */\r\nexport const getCartItemsHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  if (!userId) {\r\n    return new Response(\r\n      404,\r\n      {},\r\n      {\r\n        errors: [\"The email you entered is not Registered. Not Found error\"],\r\n      }\r\n    );\r\n  }\r\n  const userCart = schema.users.findBy({ _id: userId }).cart;\r\n  return new Response(200, {}, { cart: userCart });\r\n};\r\n\r\n/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart\r\n * body contains {product}\r\n * */\r\n\r\nexport const addItemToCartHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    const userCart = schema.users.findBy({ _id: userId }).cart;\r\n    const { product } = JSON.parse(request.requestBody);\r\n    userCart.push({\r\n      ...product,\r\n      createdAt: formatDate(),\r\n      updatedAt: formatDate(),\r\n      qty: 1,\r\n    });\r\n    this.db.users.update({ _id: userId }, { cart: userCart });\r\n    return new Response(201, {}, { cart: userCart });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles removing items to user's cart.\r\n * send DELETE Request at /api/user/cart/:productId\r\n * */\r\n\r\nexport const removeItemFromCartHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    let userCart = schema.users.findBy({ _id: userId }).cart;\r\n    const productId = request.params.productId;\r\n    userCart = userCart.filter((item) => item._id !== productId);\r\n    this.db.users.update({ _id: userId }, { cart: userCart });\r\n    return new Response(200, {}, { cart: userCart });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart/:productId\r\n * body contains {action} (whose 'type' can be increment or decrement)\r\n * */\r\n\r\nexport const updateCartItemHandler = function (schema, request) {\r\n  const productId = request.params.productId;\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    const userCart = schema.users.findBy({ _id: userId }).cart;\r\n    const { action } = JSON.parse(request.requestBody);\r\n    if (action.type === \"increment\") {\r\n      userCart.forEach((product) => {\r\n        if (product._id === productId) {\r\n          product.qty += 1;\r\n          product.updatedAt = formatDate();\r\n        }\r\n      });\r\n    } else if (action.type === \"decrement\") {\r\n      userCart.forEach((product) => {\r\n        if (product._id === productId) {\r\n          product.qty -= 1;\r\n          product.updatedAt = formatDate();\r\n        }\r\n      });\r\n    }\r\n    this.db.users.update({ _id: userId }, { cart: userCart });\r\n    return new Response(200, {}, { cart: userCart });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,oBAAzC;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAG,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;EAC5D,MAAMC,MAAM,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAf;;EACA,IAAI,CAACC,MAAL,EAAa;IACX,OAAO,IAAIN,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEQ,MAAM,EAAE,CAAC,0DAAD;IADV,CAHK,CAAP;EAOD;;EACD,MAAMC,QAAQ,GAAGL,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoB;IAAEC,GAAG,EAAEN;EAAP,CAApB,EAAqCO,IAAtD;EACA,OAAO,IAAIb,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;IAAEa,IAAI,EAAEJ;EAAR,CAAtB,CAAP;AACD,CAbM;AAeP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMK,oBAAoB,GAAG,UAAUV,MAAV,EAAkBC,OAAlB,EAA2B;EAC7D,MAAMC,MAAM,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAf;;EACA,IAAI;IACF,IAAI,CAACC,MAAL,EAAa;MACX,OAAO,IAAIN,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QACEQ,MAAM,EAAE,CAAC,0DAAD;MADV,CAHK,CAAP;IAOD;;IACD,MAAMC,QAAQ,GAAGL,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoB;MAAEC,GAAG,EAAEN;IAAP,CAApB,EAAqCO,IAAtD;IACA,MAAM;MAAEE;IAAF,IAAcC,IAAI,CAACC,KAAL,CAAWZ,OAAO,CAACa,WAAnB,CAApB;IACAT,QAAQ,CAACU,IAAT,CAAc,EACZ,GAAGJ,OADS;MAEZK,SAAS,EAAEnB,UAAU,EAFT;MAGZoB,SAAS,EAAEpB,UAAU,EAHT;MAIZqB,GAAG,EAAE;IAJO,CAAd;IAMA,KAAKC,EAAL,CAAQb,KAAR,CAAcc,MAAd,CAAqB;MAAEZ,GAAG,EAAEN;IAAP,CAArB,EAAsC;MAAEO,IAAI,EAAEJ;IAAR,CAAtC;IACA,OAAO,IAAIT,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;MAAEa,IAAI,EAAEJ;IAAR,CAAtB,CAAP;EACD,CApBD,CAoBE,OAAOgB,KAAP,EAAc;IACd,OAAO,IAAIzB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEyB;IADF,CAHK,CAAP;EAOD;AACF,CA/BM;AAiCP;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,yBAAyB,GAAG,UAAUtB,MAAV,EAAkBC,OAAlB,EAA2B;EAClE,MAAMC,MAAM,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAf;;EACA,IAAI;IACF,IAAI,CAACC,MAAL,EAAa;MACX,OAAO,IAAIN,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QACEQ,MAAM,EAAE,CAAC,0DAAD;MADV,CAHK,CAAP;IAOD;;IACD,IAAIC,QAAQ,GAAGL,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoB;MAAEC,GAAG,EAAEN;IAAP,CAApB,EAAqCO,IAApD;IACA,MAAMc,SAAS,GAAGtB,OAAO,CAACuB,MAAR,CAAeD,SAAjC;IACAlB,QAAQ,GAAGA,QAAQ,CAACoB,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAAClB,GAAL,KAAae,SAAvC,CAAX;IACA,KAAKJ,EAAL,CAAQb,KAAR,CAAcc,MAAd,CAAqB;MAAEZ,GAAG,EAAEN;IAAP,CAArB,EAAsC;MAAEO,IAAI,EAAEJ;IAAR,CAAtC;IACA,OAAO,IAAIT,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;MAAEa,IAAI,EAAEJ;IAAR,CAAtB,CAAP;EACD,CAfD,CAeE,OAAOgB,KAAP,EAAc;IACd,OAAO,IAAIzB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEyB;IADF,CAHK,CAAP;EAOD;AACF,CA1BM;AA4BP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMM,qBAAqB,GAAG,UAAU3B,MAAV,EAAkBC,OAAlB,EAA2B;EAC9D,MAAMsB,SAAS,GAAGtB,OAAO,CAACuB,MAAR,CAAeD,SAAjC;EACA,MAAMrB,MAAM,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAf;;EACA,IAAI;IACF,IAAI,CAACC,MAAL,EAAa;MACX,OAAO,IAAIN,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;QACEQ,MAAM,EAAE,CAAC,0DAAD;MADV,CAHK,CAAP;IAOD;;IACD,MAAMC,QAAQ,GAAGL,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoB;MAAEC,GAAG,EAAEN;IAAP,CAApB,EAAqCO,IAAtD;IACA,MAAM;MAAEmB;IAAF,IAAahB,IAAI,CAACC,KAAL,CAAWZ,OAAO,CAACa,WAAnB,CAAnB;;IACA,IAAIc,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;MAC/BxB,QAAQ,CAACyB,OAAT,CAAkBnB,OAAD,IAAa;QAC5B,IAAIA,OAAO,CAACH,GAAR,KAAgBe,SAApB,EAA+B;UAC7BZ,OAAO,CAACO,GAAR,IAAe,CAAf;UACAP,OAAO,CAACM,SAAR,GAAoBpB,UAAU,EAA9B;QACD;MACF,CALD;IAMD,CAPD,MAOO,IAAI+B,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;MACtCxB,QAAQ,CAACyB,OAAT,CAAkBnB,OAAD,IAAa;QAC5B,IAAIA,OAAO,CAACH,GAAR,KAAgBe,SAApB,EAA+B;UAC7BZ,OAAO,CAACO,GAAR,IAAe,CAAf;UACAP,OAAO,CAACM,SAAR,GAAoBpB,UAAU,EAA9B;QACD;MACF,CALD;IAMD;;IACD,KAAKsB,EAAL,CAAQb,KAAR,CAAcc,MAAd,CAAqB;MAAEZ,GAAG,EAAEN;IAAP,CAArB,EAAsC;MAAEO,IAAI,EAAEJ;IAAR,CAAtC;IACA,OAAO,IAAIT,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;MAAEa,IAAI,EAAEJ;IAAR,CAAtB,CAAP;EACD,CA7BD,CA6BE,OAAOgB,KAAP,EAAc;IACd,OAAO,IAAIzB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;MACEyB;IADF,CAHK,CAAP;EAOD;AACF,CAzCM"},"metadata":{},"sourceType":"module"}